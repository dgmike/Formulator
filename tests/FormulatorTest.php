<?php
require_once __DIR__ . '/config.php';
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-03-26 at 11:41:31.
 */
class Apolo_Component_FormulatorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Apolo_Component_Formulator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Apolo_Component_Formulator;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Apolo_Component_Formulator::__construct
     * @covers Apolo_Component_Formulator::getConfig
     * @covers Apolo_Component_Formulator::getElements
     */
    public function testInitCallsAConfigCommand()
    {
        $this->object = new Apolo_Component_Formulator();
        $config = $this->object->getConfig();
        $this->assertCount(
            0, $config, 'No configuration'
        );
        $this->assertEquals(
            array(), $config, 'No configuration'
        );
        $this->assertEquals(
            array(), $this->object->getElements(), 'No element setted'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::__construct
     * @covers Apolo_Component_Formulator::getConfig
     * @covers Apolo_Component_Formulator::getElements
     */
    public function testInitCallsAConfigCommand2()
    {
        $this->object = new Apolo_Component_Formulator(array(
            'method' => 'POST',
        ));
        $config = $this->object->getConfig();
        $this->assertCount(
            1, $config, 'Have configured'
        );
        $this->assertEquals(
            'POST', $config['method'], 'Configured method'
        );
        $this->assertEquals(
            array(), $this->object->getElements(), 'No element setted'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::__construct
     * @covers Apolo_Component_Formulator::getConfig
     * @covers Apolo_Component_Formulator::getElements
     */
    public function testInitCallsAConfigCommand3()
    {
        $this->object = new Apolo_Component_Formulator(array(
            'elements' => array(array(
                'type' => 'html',
                'content' => '',
            )),
        ));
        $this->assertEquals(
            array(), $this->object->getConfig(), 'No configuration was setted'
        );
        $this->assertCount(
            1, $this->object->getElements(), 'Added one element'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::__construct
     * @covers Apolo_Component_Formulator::getConfig
     * @covers Apolo_Component_Formulator::getElements
     */
    public function testInitCallsAConfigCommand4()
    {
        $this->object = new Apolo_Component_Formulator($configuration = null, 
            array(
                'type' => 'html',
                'content' => '',
            ), array(
                'type' => 'html',
                'content' => '',
            )
        );
        $this->assertEquals(
            array(), $this->object->getConfig(), 'Null not sets a config'
        );
        $this->assertCount(
            2, $this->object->getElements(), 'Setted 2 elements'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::config
     * @covers Apolo_Component_Formulator::getConfig
     * @covers Apolo_Component_Formulator::getElements
     * @covers Apolo_Component_Formulator::getValues
     */
    public function testConfigSetsTheConfigValuesAndElements()
    {
        $uniqId = uniqId();
        $this->object->config(array(
            'method' => 'post',
            'action' => '/my/custom/url/' . $uniqId,
        ));
        $config = $this->object->getConfig();
        $this->assertEquals(
            $config['method'], 'post', 'The method was setted'
        );
        $this->assertEquals(
            $config['action'], '/my/custom/url/' . $uniqId, 'The action was setted'
        );
        $this->object->config(array(
            'method' => 'get',
            'id'     => 'myID',
        ));
        $config = $this->object->getConfig();
        $this->assertEquals(
            $config['action'], '/my/custom/url/' . $uniqId, 'The action not changed'
        );
        $this->assertEquals(
            $config['id'], 'myID', 'New value for ID'
        );
        $this->assertEquals(
            $config['method'], 'get', 'Changed the method'
        );
        $this->assertCount(
            0, $this->object->getElements(), 'No element was setted'
        );
        $this->object->config(array(
            'elements' => array(
                array(
                    'type' => 'html',
                    'content' => '',
                ),
            ),
        ));
        $this->assertCount(
            1, $this->object->getElements(), 'One element is added'
        );
        $this->object->config(array(
            'elements' => array(
                array(
                    'type' => 'html',
                    'content' => '',
                ),
            ),
        ));
        $this->assertCount(
            2, $this->object->getElements(), 'A new element is added'
        );
        $this->object->config(array(
            'values' => array(
                'person' => 'Michael',
                'status' => 'married',
            ),
        ));
        $values = $this->object->getValues();
        $this->assertEquals(
            'Michael', $values['person'], 'Setted value over config'
        );
        $this->object->config(array(
            'values' => array(
                'person' => 'Alice',
                'age'    => 21,
            ),
        ));
        $values = $this->object->getValues();
        $this->assertEquals(
            'Alice', $values['person'], 'Reseted value over config'
        );
        $this->assertEquals(
            '21', $values['age'], 'Setted new value over config'
        );
        $this->assertFalse(
            array_key_exists('status', $values), 'Old values are unseted'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::setForm
     * @covers Apolo_Component_Formulator::getForm
     */
    public function testSetFormJustNeedsToPassTheArguments()
    {
        $form = array(
            uniqId(true) => uniqId(true),
        );
        $this->object->setForm($form);
        $newForm = $this->object->getForm();
        $this->assertEquals(
            $form, $newForm, 'Just pass the config..'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::getConfig
     */
    public function testGetConfig()
    {
        $this->object->config(array(
            'target' => '_blank',
        ));
        $config = $this->object->getConfig();
        $this->assertEquals(
            '_blank', $config['target'], 'Getting the right config'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::addElements
     * @todo   Implement testAddElements().
     */
    public function testAddElements()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::addElement
     * @todo   Implement testAddElement().
     */
    public function testAddElement()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::render
     * @todo   Implement testRender().
     */
    public function testRender()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::getElements
     * @todo   Implement testGetElements().
     */
    public function testGetElements()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::addMedia
     * @todo   Implement testAddMedia().
     */
    public function testAddMedia()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::getMedia
     * @todo   Implement testGetMedia().
     */
    public function testGetMedia()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Apolo_Component_Formulator::getValues
     * @todo   Implement testGetValues().
     */
    public function testGetValues()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
